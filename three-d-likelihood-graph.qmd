
```{r}
library(pander)
library(ggplot2)
library(plotly)
library(ggeasy)
library(dplyr)
library(haven)
```

```{r}
# load the data directly from a UCSF website
hers = haven::read_dta("https://regression.ucsf.edu/sites/g/files/tkssra6706/f/wysiwyg/home/data/hersdata.dta")
data1 = 
  hers |> 
  filter(
    diabetes == 0,
    exercise == 0)

n.obs <- nrow(data1)


glucose_data = 
  data1 |> 
  pull(glucose)

plot1 = 
  data1 |> 
  ggplot() +
  geom_histogram(aes(x = glucose), bins = 30) +
  theme_classic() +
  easy_labs()

plot1 |> ggplotly() 

```

Looks somewhat plausibly Gaussian. Good enough for this example!

## Construct the likelihood and log-likelihood functions

```{r}
# it's computationally better to construct the log-likelihood first and then 
# exponentiate it to get the likelihood

loglik = function(
    mu = mean(x), # I'm assigning default values, which the function will use 
    # unless we tell it otherwise
    sigma = sd(x), # note that you can define some defaults based on other arguments
    x = glucose_data, 
    n = length(x)
)
{
  
  normalizing_constants = -n/2 * log((sigma^2) * 2 * pi) 
  
  likelihood_kernel = - 1/(2 * sigma^2) * 
    {
      # I have to do this part in a somewhat complicated way
      # so that we can pass in vectors of possible values of mu
      # and get the likelihood for each value;
      # for the binomial case it's easier
      sum(x^2) - 2 * sum(x) * mu + n * mu^2
    }
  
  answer = normalizing_constants + likelihood_kernel
  
  return(answer)
  
}

# `...` means pass any inputs to lik() along to loglik()
lik = function(...) exp(loglik(...))


```

### Graph the Likelihood

:::{#fig-likelihood-mu}

```{r}
mu_likplot <- 
  ggplot() + 
  geom_function(fun = function(x) lik(mu = x)) + 
  xlim(mean(glucose_data) + c(-1,1) * sd(glucose_data)) +
  ylab("likelihood") + 
  xlab("mu") +
  geom_vline(xintercept = mean(glucose_data), col = "red")

```

Likelihood of `hers` data w.r.t. $\mu$

:::

### Graph the Log-likelihood

:::{#fig-loglik-mu}

```{r}

ggplot() + 
  geom_function(fun = function(x) loglik(mu = x)) + 
  xlim(mean(glucose_data) + c(-1,1) * sd(glucose_data)) +
  ylab('log(likelihood)') + 
  xlab("mu") +
  geom_vline(xintercept = mean(glucose_data), col = "red")


```

Log-likelihood of `hers` data w.r.t. $\mu$

:::

## Likelihood and log-likelihood for $\sigma^2$, conditional on $\mu = \hat\mu$:


```{r}
lik_plot = ggplot() + 
  geom_function(fun = function(x) lik(sigma = x, mu = mean(glucose_data))) + 
  xlim(sd(glucose_data) * c(.9,1.1)) + 
  geom_vline(
    xintercept = sd(glucose_data) * sqrt(n.obs - 1)/sqrt(n.obs), 
    col = "red") +
  ylab('Likelihood')

```


```{r}
loglik_plot = ggplot() + 
  geom_function(
    fun = function(x) loglik(sigma = x, mu = mean(glucose_data))
  ) + 
  xlim(sd(glucose_data) * c(0.9, 1.1)) +
  geom_vline(
    xintercept = 
      sd(glucose_data) * sqrt(n.obs - 1) / sqrt(n.obs), 
    col = "red") +
  ylab("log(likelihood)")


```

:::{#fig-3d-llik}

```{r}

## Graph the log-likelihood ranging over both parameters at once:

library(plotly)

n_points = 25
mu = seq(90, 105, length.out = n_points)
sigma = seq(6, 20, 
            length.out = n_points)
names(mu) = round(mu, 5)
names(sigma) = round(sigma, 5)
lliks = outer(mu, sigma, loglik)
liks = outer(mu, sigma, lik)

plot_ly(
  type = "surface",
  x = ~mu,
  y = ~sigma,
  z = ~t(lliks)) 
 # see https://stackoverflow.com/questions/69472185/correct-use-of-coordinates-to-plot-surface-data-with-plotly for explanation of why transpose `t()` is needed
```

Log-likelihood of `hers` data w.r.t. $\mu$ and $\sigma^2$

:::
