# Introduction to Survival Analysis

{{< include shared-config.qmd >}}

## Overview

### Time-to-event outcomes {.smaller}

**Survival analysis** is a framework for modeling *time-to-event* outcomes. It is used in:

-   clinical trials, where the event is often death or
recurrence of disease.
-   engineering reliability analysis, where the event is
failure of a device or system.
-   insurance, particularly life insurance, where the
event is death.

:::{.callout-note}
The term *survival analysis* is a bit misleading. Survival outcomes can sometimes be analyzed using binomial models (logistic regression). *Time-to-event models* or *survival time analysis* might be a better name.
:::

## Time-to-event outcome distributions

{{< include _sec-surv-vars.qmd >}}

## Distribution functions for time-to-event variables

{{< include _sec-surv-dists.qmd >}}

## Parametric Models for Time-to-Event Outcomes

### Exponential Distribution

{{< include _sec-exp-dist.qmd >}}

---

### Other Parametric Survival Distributions

-   Any density on $[0,\infty)$ can be a survival distribution, but the
most useful ones are all skew right.
-   The most frequently used generalization of the exponential is the [Weibull](probability.qmd#sec-weibull).
-   Other common choices are the gamma, log-normal, log-logistic,
Gompertz, inverse Gaussian, and Pareto.
-   Most of what we do going forward is non-parametric or
semi-parametric, but sometimes these parametric distributions
provide a useful approach.

## Nonparametric Survival Analysis

### Basic ideas

-   Mostly, we work without a parametric model.

-   The first task is to estimate a survival function from data listing
survival times, and censoring times for censored data.

-   For example one patient may have relapsed at 10 months. Another
might have been followed for 32 months without a relapse having
occurred (censored).

-   The minimum information we need for each patient is a time and a
censoring variable which is 1 if the event occurred at the indicated
time and 0 if this is a censoring time.

## Example: clinical trial for pediatric acute leukemia

### Overview of study {.smaller}

This is from a clinical trial in 1963 for 6-MP treatment vs. placebo for
Acute Leukemia in 42 children.

-   Pairs of children:

-   matched by remission status at the time of treatment (`remstat`:
`1` = partial, `2` = complete)
-   randomized to 6-MP (exit times in `t2`) or placebo (exit times
in `t1`)

-   Followed until relapse or end of study.

-   All of the placebo group relapsed, but some of the 6-MP group were
censored (which means they were still in remission); indicated by
`relapse` variable (`0` = censored, `1` = relapse).

-   6-MP = 6-Mercaptopurine (Purinethol) is an anti-cancer
("antineoplastic" or "cytotoxic") chemotherapy drug used currently
for Acute lymphoblastic leukemia (ALL). It is classified as an
antimetabolite.

### Study design {.smaller}

- Clinical trial in 1963 for 6-MP treatment vs. placebo for Acute Leukemia
in 42 children. 
- Pairs of children:
- matched by remission status at the time of treatment (`remstat`)
- `remstat` = 1: partial 
- `remstat` = 2: complete
- randomized to 6-MP (exit time: `t2`) or placebo (`t1`). 
- Followed until relapse or end of study. 
- All of the placebo group relapsed, 
- Some of the 6-MP group were censored.

---

```{r}
#| tbl-cap: "`drug6mp` pediatric acute leukemia data"
#| label: tbl-drug6mp
library(KMsurv)
data(drug6mp)
drug6mp <- drug6mp |>
  tibble::as_tibble() |>
  print()
```

### Data documentation for `drug6mp`

```{r, printr.help.sections = c("description", "format")}
#| fig-cap: Data documentation for `drug6mp`
#| label: fig-drug6mp-helpdoc
# library(printr) # inserts help-file output into markdown output
library(KMsurv)
?drug6mp
```

### Descriptive Statistics {.smaller}

```{r}
#| tbl-cap: "Summary statistics for `drug6mp` data"
#| label: tbl-drug6mp-summary
#| code-fold: show
summary(drug6mp)
```

::: notes

-   The average time in each group is not useful. Some of the 6-MP
patients have not relapsed at the time recorded, while all of the
placebo patients have relapsed.
-   The median time is not really useful either because so many of the
6-MP patients have not relapsed (12/21).
-   Both are biased down in the 6-MP group. Remember that lower times
are worse since they indicate sooner recurrence.
:::

### Exponential model

::: notes
-   We *can* compute the hazard rate, assuming an exponential model:
number of relapses divided by the sum of the exit times (@eq-mle-exp).
:::

$$\hat\lambda = \frac{\sumin D_i}{\sumin Y_i}$$

::: notes
-   For the placebo, that is just the reciprocal of the mean time:
:::
$$
\ba
\hat \lambda_{\text{placebo}} 
&= \frac{\sumin D_i}{\sumin Y_i}
\\ &= \frac{\sumin 1}{\sumin Y_i}
\\ &= \frac{n}{\sumin Y_i}
\\ &= \frac{1}{\bar{Y}}
\\ &= \frac{1}{`r drug6mp |> pull(t1) |> mean()`}
\\ &= `r 1/(drug6mp |> pull(t1) |> mean())`
\ea
$$

---

-   For the 6-MP group, $\hat\lambda = 9/359 = 0.025$

$$
\ba
\hat \lambda_{\text{6-MP}} 
&= \frac{\sumin D_i}{\sumin Y_i}
\\ &= \frac{9}{359}
\\ &= `r 9/359`
\ea
$$

-   The estimated hazard in the placebo group is 4.6 times as
large as in the 6-MP group (assuming the hazard is constant over time).


## The Kaplan-Meier Product Limit Estimator

### Estimating survival in datasets without censoring

::: notes
In the `drug6mp` dataset, the estimated survival function for the placebo patients is easy to compute. 
For any time $t$ in months, $\surv(t)$ is the fraction of patients with times greater than $t$:
:::

```{r}
#| include: false
#| code-summary: example-km-curve

y <- c(1, 2, 3, 3, 3, 5, 9, 13, 23, 100)
d <- c(1, 1, 1, 0, 1, 0, 1, 1, 1, 1)
library(survival)
temp1 <- survfit(Surv(y, d) ~ 1)
```


### Estimating survival in datasets with censoring

-   For the 6-MP patients, we cannot ignore the censored data because we
know that the time to relapse is greater than the censoring time.

-   For any time $t$ in months, we know that 6-MP patients with times
greater than $t$ have not relapsed, and those with relapse time less
than $t$ have relapsed, but we don't know if patients with censored
time less than $t$ have relapsed or not.

-   The procedure we usually use is the Kaplan-Meier product-limit
estimator of the survival function.

-   The Kaplan-Meier estimator is a step function (like the empirical
cdf), which changes value only at the event times, not at the
censoring times.

-   At each event time $t$, we compute the at-risk group size $Y$, which
is all those observations whose event time or censoring time is at
least $t$.

-   If $d$ of the observations have an event time (not a censoring time)
of $t$, then the group of survivors immediately following time $t$
is reduced by the fraction $$\frac{Y-d}{Y}=1-\frac{d}{Y}$$

---

{{< include _def-km-estimator.qmd >}}

---

:::{#thm-KM-est-no-cens}
#### Kaplan-Meier Estimate with No Censored Observations

If there are no censored data, and there are $n$ data points, then just
after (say) the third event time 

$$
\begin{aligned}
\hat \surv(t) 
&= \prod_{t_i < t}\sb{1-\frac{d_i}{Y_i}}
\\ &= \sb{\frac{n-d_1}{n}} \sb{\frac{n-d_1-d_2}{n-d_1}} \sb{\frac{n-d_1-d_2-d_3}{n-d_1-d_2}}
\\ &= \frac{n-d_1-d_2-d_3}{n}
\\ &=1-\frac{d_1+d_2+d_3}{n}
\\ &=1-\hat F(t)
\end{aligned}
$$

where $\hat F(t)$ is the usual empirical CDF estimate.

:::

### Kaplan-Meier curve for `drug6mp` data

Here is the Kaplan-Meier estimated survival curve for the patients who
received 6-MP in the `drug6mp` dataset (we will see code to produce
figures like this one shortly):

```{r}
#| fig-cap: "Kaplan-Meier Survival Curve for 6-MP Patients"
#| label: fig-KM-mp6
# | echo: false

require(KMsurv)
data(drug6mp)
library(dplyr)
library(survival)

drug6mp_km_model1 <-
  drug6mp |>
  mutate(surv = Surv(t2, relapse)) |>
  survfit(formula = surv ~ 1, data = _)

library(ggfortify)
drug6mp_km_model1 |>
  autoplot(
    mark.time = TRUE,
    conf.int = FALSE
  ) +
  expand_limits(y = 0) +
  xlab("Time since diagnosis (months)") +
  ylab("KM Survival Curve")
```

### Kaplan-Meier calculations {.smaller}

Let's compute these estimates and build the chart by hand:

```{r}
library(KMsurv)
library(dplyr)
data(drug6mp)

drug6mp.v2 <-
  drug6mp |>
  as_tibble() |>
  mutate(
    remstat = remstat |>
      case_match(
        1 ~ "partial",
        2 ~ "complete"
      ),
    # renaming to "outcome" while relabeling is just a style choice:
    outcome = relapse |>
      case_match(
        0 ~ "censored",
        1 ~ "relapsed"
      )
  )

km.6mp <-
  drug6mp.v2 |>
  summarize(
    .by = t2,
    Relapses = sum(outcome == "relapsed"),
    Censored = sum(outcome == "censored")
  ) |>
  # here we add a start time row, so the graph starts at time 0:
  bind_rows(
    tibble(
      t2 = 0,
      Relapses = 0,
      Censored = 0
    )
  ) |>
  # sort in time order:
  arrange(t2) |>
  mutate(
    Exiting = Relapses + Censored,
    `Study Size` = sum(Exiting),
    Exited = cumsum(Exiting) |> dplyr::lag(default = 0),
    `At Risk` = `Study Size` - Exited,
    Hazard = Relapses / `At Risk`,
    `KM Factor` = 1 - Hazard,
    `Cumulative Hazard` = cumsum(`Hazard`),
    `KM Survival Curve` = cumprod(`KM Factor`)
  )

library(pander)
pander(km.6mp)
```

---

#### Summary

For the 6-MP patients at time 6 months, there are 21 patients at risk.
At $t=6$ there are 3 relapses and 1 censored observations.

The Kaplan-Meier factor is $(21-3)/21 = 0.857$. The number at risk for
the next time ($t=7$) is $21-3-1=17$.

At time 7 months, there are 17 patients at risk. At $t=7$ there is 1
relapse and 0 censored observations. The Kaplan-Meier factor is
$(17-1)/17 = 0.941$. The Kaplan Meier estimate is
$0.857\times0.941=0.807$. The number at risk for the next time ($t=9$)
is $17-1=16$.

---

Now, let's graph this estimated survival curve using `ggplot()`:

```{r}
#| label: fig-km-by-hand
#| fig-cap: "KM curve for 6MP patients, calculated by hand"
library(ggplot2)
conflicts_prefer(dplyr::filter)
km.6mp |>
  ggplot(aes(x = t2, y = `KM Survival Curve`)) +
  geom_step() +
  geom_point(data = km.6mp |> filter(Censored > 0), shape = 3) +
  expand_limits(y = c(0, 1), x = 0) +
  xlab("Time since diagnosis (months)") +
  ylab("KM Survival Curve") +
  scale_y_continuous(labels = scales::percent)
```

## Using the `survival` package in R

We don't have to do these calculations by hand every time; the
`survival` package and several others have functions available to
automate many of these tasks (full list:
<https://cran.r-project.org/web/views/Survival.html>).

### The `Surv` function

To use the `survival` package, the first step is telling R how to
combine the exit time and exit reason (censoring versus event) columns.
The `Surv()` function accomplishes this task.

#### Example: `Surv()` with `drug6mp` data

```{r}
#| code-fold: show
#| code-line-numbers: "5-7"
library(survival)
drug6mp.v3 <-
  drug6mp.v2 |>
  mutate(
    surv2 = Surv(
      time = t2,
      event = (outcome == "relapsed")
    )
  )

print(drug6mp.v3)
```

The output of `Surv()` is a vector of objects with class `Surv`. When we
print this vector:

-   observations where the event was observed are printed as the event
time (for example, `surv2 = 10` on line 1)

-   observations where the event was right-censored are printed as the
censoring time with a plus sign (`+`; for example, `surv2 = 32+` on
line 3).

### The `survfit` function

Once we have constructed our `Surv` variable, we can calculate the
Kaplan-Meier estimate of the survival curve using the `survfit()`
function.

::: callout-note
The documentation for `?survfit` isn't too helpful; the
`survfit.formula` documentation is better.

```{r, printr.help.sections = c("description", "usage")}
#| include: false
?survfit.formula
```
:::

---

#### Example: `survfit()` with `drug6mp` data

Here we use `survfit()` to create a `survfit` object, which contains the
Kaplan-Meier estimate:

```{r}
#| code-fold: show
drug6mp.km_model <- survfit(
  formula = surv2 ~ 1,
  data = drug6mp.v3
)
```

`print.survfit()` just gives some summary statistics:

```{r}
#| code-fold: show
print(drug6mp.km_model)
```

`summary.survfit()` shows us the underlying Kaplan-Meier table:

```{r}
#| code-fold: show
summary(drug6mp.km_model)
```

---

We can specify which time points we want using the `times` argument:

```{r}
#| code-fold: show
summary(
  drug6mp.km_model,
  times = c(0, drug6mp.v3$t2)
)
```

---

```{r, printr.help.sections = c("description", "usage", "arguments")}
#| code-fold: show
?summary.survfit
```

### Plotting estimated survival functions

We can plot `survfit` objects with `plot()`, `autoplot()`, or
`ggsurvplot()`:

```{r}
#| code-fold: show
#| fig-cap: "Kaplan-Meier Survival Curve for 6-MP Patients"

library(ggfortify)
autoplot(drug6mp.km_model)

# not shown:
# plot(drug6mp.km_model)

# library(survminer)
# ggsurvplot(drug6mp.km_model)
```

---

#### quantiles of survival curve

We can extract quantiles with `quantile()`:

```{r}
#| code-line-numbers: "2"
drug6mp.km_model |>
  quantile(p = c(.25, .5)) |>
  as_tibble() |>
  mutate(p = c(.25, .5)) |>
  relocate(p, .before = everything())
```

## The log-rank test

(a.k.a. the Mantel-Cox test)

---

:::{#exr-compare-surv-ests}
How do we test the null hypothesis that two or more groups 
have the same time-to-event distribution?
:::

---

:::{#sol-compare-surv-ests}
One option is the log-rank test
comparing the Kaplan-Meier estimates of the survival functions of those groups.
:::

---

::: notes
Adapted from @kleinbaum2012survival p68:

- The log–rank test is a large-sample chi-square test.

- The log–rank test uses a test statistic that compares KM curves between groups across all survival times.

- Like many other statistics used in other kinds of chi-square tests, 
the log–rank statistic makes use of observed
versus expected cell counts over categories of
outcomes.

- The categories for the log–rank statistic
are defined by each of the ordered failure
times for the entire set of data being analyzed.

:::

For $t \in t_1,...,t_n$:
$$
\ba
\hat{\haz}_t &= \frac{\sum_x m_{x,t}}{\sum_x n_{x,t}}
\\
\hat{E}_{t,x} &= \hat{\haz}_t * n_{x,t}
\ea
$$


### The `survdiff` function

```{r, printr.help.sections = c("description", "usage")}
?survdiff
```

### Example: `survdiff()` with `drug6mp` data

Now we are going to compare the placebo and 6-MP data. We need to
reshape the data to make it usable with the standard `survival`
workflow:

```{r}
library(survival)
library(tidyr)
drug6mp.v4 <-
  drug6mp.v3 |>
  select(pair, remstat, t1, t2, outcome) |>
  # here we are going to change the data from a wide format to long:
  pivot_longer(
    cols = c(t1, t2),
    names_to = "treatment",
    values_to = "exit_time"
  ) |>
  mutate(
    treatment = treatment |>
      case_match(
        "t1" ~ "placebo",
        "t2" ~ "6-MP"
      ),
    outcome = if_else(
      treatment == "placebo",
      "relapsed",
      outcome
    ),
    surv = Surv(
      time = exit_time,
      event = (outcome == "relapsed")
    )
  )
```

---

Using this long data format, we can fit a Kaplan-Meier curve for each
treatment group simultaneously:

```{r}
drug6mp.km_model2 <-
  survfit(
    formula = surv ~ treatment,
    data = drug6mp.v4
  )
```

---

We can plot the curves in the same graph:

```{r}
drug6mp.km_model2 |> autoplot()
```

---

We can also perform something like a t-test, where the null hypothesis
is that the curves are the same:

:::{#tbl-logrank-6mp}
```{r}

o_e <- drug6mp.v4 |> 
  arrange(exit_time) |> 
  mutate(
    .by = treatment,
    n_exited = row_number(),
    n_at_risk = n() - n_exited + 1
  ) |> 
  dplyr::summarize(
    .by = all_of(c("exit_time", "treatment")),
    n_at_risk = max(n_at_risk),
    n_events = sum(outcome == "relapsed")
  ) |> 
  tidyr::pivot_wider(
    names_from = "treatment",
    values_from = c(n_at_risk, n_events)
  ) |> 
  tidyr::fill(
    starts_with("n_at_risk"),
    .direction = "up"
  ) |> 
  replace_na(list("n_events_placebo" = 0,
                  "n_events_6-MP" = 0)) |> 
  mutate(
    n_at_risk = rowSums(across(starts_with("n_at_risk"))),
    n_events = rowSums(across(starts_with("n_events"))),
    marginal_hazard = n_events / n_at_risk,
    expected_6mp = marginal_hazard * `n_at_risk_6-MP`,
    expected_plc = marginal_hazard * n_at_risk_placebo,
    diff_6mp = `n_events_6-MP` - expected_6mp,
    diff_plc = n_events_placebo - expected_plc
  ) |> 
  filter(n_events > 0)

o_e

```
Observed and expected event counts for the 6-MP data, for log-rank test
:::

:::{#tbl-sum-obs-exp}
```{r}
o_e_summ <- o_e |> 
  summarize(
    across(starts_with("expected"), sum),
    across(starts_with("n_events_"), sum)
  )
pander::pander(o_e_summ)
```
Observed and expected sums for the 6-MP data, for log-rank test

:::

---

::: notes
The exact variance formula for each of two groups is:
:::

$$
\Varf{O_i - E_i} = \sum_j \frac
{n_{1j} n_{2j} (m_j) (n_j - m_j)} 
{(n_j)^2 (n_j - 1)}
$$

::: notes
See @kleinbaum2012survival, Chapter 2 Appendix for the exact variance formula
for more than two groups.
:::

---

::: notes
Or we can use an approximate statistic:
:::
$$X^2 \approx \sum_{i = 1}^p \frac{(O_i - E_i)^2}{E_i}$$

```{r}
with(
  o_e_summ,
  tibble(
    "6mp" = (`n_events_6-MP` - expected_6mp)^2 / expected_6mp,
    "placebo" = (n_events_placebo - expected_plc)^2 / expected_plc,
    sum = `6mp` + placebo
  )
) |> 
  pander::pander()
```

---

R gives us both the exact and approximate results:

```{r}
survdiff(
  formula = surv ~ treatment,
  data = drug6mp.v4
)
```

---

::: notes
By default, `survdiff()` ignores any pairing, 
but we can use `strata()` to perform something similar to a paired t-test:
:::

```{r}
lrank_test <- survdiff(
  formula = surv ~ treatment + strata(pair),
  data = drug6mp.v4
)
lrank_test
```

::: notes
Interestingly, accounting for pairing reduces the significance of the
difference.
:::

## Example: Bone Marrow Transplant Data

---

Data from @copelan1991treatment

![Recovery process from a bone marrow transplant (Fig. 1.1 from @klein2003survival)](images/bone marrow multi-stage model.png){#fig-bmt-mst}

### Study design

##### Treatment {.unnumbered}

-   **allogeneic** (from a donor) **bone marrow transplant therapy**

##### Inclusion criteria {.unnumbered}

-   **acute myeloid leukemia (AML)**
-   **acute lymphoblastic leukemia (ALL).**

##### Possible intermediate events {.unnumbered}

-   **graft vs. host disease (GVHD)**: an immunological rejection
response to the transplant
-   **platelet recovery**: a return of platelet count to normal levels.

One or the other, both in either order, or neither may occur.

##### End point events

-   relapse of the disease
-   death

Any or all of these events may be censored.

### `KMsurv::bmt` data in R

```{r}
library(KMsurv)
?bmt
```

### Analysis plan

-   We concentrate for now on disease-free survival (`t2` and `d3`) for
the three risk groups, ALL, AML Low Risk, and AML High Risk.
-   We will construct the Kaplan-Meier survival curves, compare them,
and test for differences.
-   We will construct the cumulative hazard curves and compare them.
-   We will estimate the hazard functions, interpret, and compare them.

### Survival Function Estimate and Variance

$$\hat \surv(t) = \prod_{t_i < t}\left[1-\frac{d_i}{Y_i}\right]$$ where
$Y_i$ is the group at risk at time $t_i$.

The estimated variance of $\hat \surv(t)$ is:

:::{#thm-greenwood}
#### Greenwood's estimator for variance of Kaplan-Meier survival estimator

$$
\varhf{\hat \surv(t)} = \hat \surv(t)^2\sum_{t_i <t}\frac{d_i}{Y_i(Y_i-d_i)}
$${#eq-var-est-surv}
:::


We can use @eq-var-est-surv for confidence intervals for a survival function or a
difference of survival functions.

---

##### Kaplan-Meier survival curves

```{r}
#| code-summary: "code to preprocess and model `bmt` data"
library(KMsurv)
library(survival)
data(bmt)

bmt <-
  bmt |>
  as_tibble() |>
  mutate(
    group =
      group |>
      factor(
        labels = c("ALL", "Low Risk AML", "High Risk AML")
      ),
    surv = Surv(t2, d3)
  )

km_model1 <- survfit(
  formula = surv ~ group,
  data = bmt
)
```

```{r "KM survival curves for bmt data"}
#| fig-cap: "Disease-Free Survival by Disease Group"

library(ggfortify)
autoplot(
  km_model1,
  conf.int = TRUE,
  ylab = "Pr(disease-free survival)",
  xlab = "Time since transplant (days)"
) +
  theme_bw() +
  theme(legend.position = "bottom")
```

---

### Understanding Greenwood's formula (optional)

::: notes
To see where Greenwood's formula comes from, let $x_i = Y_i - d_i$. We
approximate the solution treating each time as independent, with $Y_i$
fixed and ignore randomness in times of failure and we treat $x_i$ as
independent binomials $\text{Bin}(Y_i,p_i)$. Letting $\surv(t)$ be the
"true" survival function
:::

$$
\begin{aligned}
\hat \surv(t) &=\prod_{t_i<t}x_i/Y_i\\
\surv(t)&=\prod_{t_i<t}p_i
\end{aligned}
$$

$$
\begin{aligned}
\frac{\hat \surv(t)}{\surv(t)} 
&= \prod_{t_i<t} \frac{x_i}.    {p_iY_i}
\\ &= \prod_{t_i<t} \frac{\hat p_i}{p_i}
\\ &= \prod_{t_i<t} \paren{1+\frac{\hat p_i-p_i}{p_i}}
\\ &\approx 1+\sum_{t_i<t} \frac{\hat p_i-p_i}{p_i}
\end{aligned}
$$

---

$$
\begin{aligned}
\text{Var}\left(\frac{\hat \surv(t)}{\surv(t)}\right) 
&\approx \text{Var}\left(1+\sum_{t_i<t} \frac{\hat p_i-p_i}{p_i}\right) 
\\ &=\sum_{t_i<t} \frac{1}{p_i^2}\frac{p_i(1-p_i)}{Y_i} 
\\ &= \sum_{t_i<t} \frac{(1-p_i)}{p_iY_i}
\\ &\approx\sum_{t_i<t} \frac{(1-x_i/Y_i)}{x_i}
\\ &=\sum_{t_i<t} \frac{Y_i-x_i}{x_iY_i}
\\ &=\sum_{t_i<t} \frac{d_i}{Y_i(Y_i-d_i)}
\\ \tf \Varf{\hat \surv(t)}
&\approx \hat \surv(t)^2\sum_{t_i<t} \frac{d_i}{Y_i(Y_i-d_i)}
\end{aligned}
$$

### Test for differences among the disease groups

Here we compute a chi-square test for assocation between disease group
(`group`) and disease-free survival:

```{r}
survdiff(surv ~ group, data = bmt)
```

### Cumulative Hazard

$$
\begin{aligned}
\haz(t) 
&\eqdef   \p(T=t|T\ge t)\\
&= \frac{\p(T=t)}{\P(T\ge t)}\\
&= -\deriv{t}\logf{\\surv(t)}
\end{aligned}
$$

The **cumulative hazard** (or **integrated hazard**) function is

$$\cuhaz(t)\eqdef  \int_0^t \haz(t) dt$$ 

Since
$\haz(t) = -\deriv{t}\logf{\surv(t)}$ as shown above, 
we have:

$$
\cuhaz(t)=-\logf{\surv(t)}
$$

---

So we can estimate $\cuhaz(t)$ as:

$$
\begin{aligned}
\hat \cuhaz(t) 
&= -\logf{\hat \surv(t)}\\
&= -\logf{\prod_{t_i < t}\sb{1-\frac{d_i}{Y_i}}}\\
&= -\sum_{t_i < t}\logf{1-\frac{d_i}{Y_i}}
\end{aligned}
$$

This is the **Kaplan-Meier (product-limit) estimate of cumulative
hazard**.

---

#### Example: Cumulative Hazard Curves for Bone-Marrow Transplant (`bmt`) data

```{r}
#| fig-cap: "Disease-Free Cumulative Hazard by Disease Group"
#| label: fig-cuhaz-bmt

autoplot(
  fun = "cumhaz",
  km_model1,
  conf.int = FALSE,
  ylab = "Cumulative hazard (disease-free survival)",
  xlab = "Time since transplant (days)"
) +
  theme_bw() +
  theme(legend.position = "bottom")
```

## Nelson-Aalen Estimates of Cumulative Hazard and Survival

---

:::{#def-na-cuhaz-est}
#### Nelson-Aalen Cumulative Hazard Estimator
:::: notes
The point hazard at time $t_i$ can be estimated by $d_i/Y_i$, which
leads to the **Nelson-Aalen estimator of the cumulative hazard**:
::::
$$\hat H_{NA}(t) \eqdef \sum_{t_i < t}\frac{d_i}{Y_i}$${#eq-NA-cuhaz-est}

:::

---

:::{#thm-var-NA-est}

#### Variance of Nelson-Aalen estimator

:::: notes
The variance of this estimator is approximately: 
::::

$$
\begin{aligned}
\hat{\text{Var}}\left(\hat H_{NA} (t)\right) 
&= \sum_{t_i <t}\frac{(d_i/Y_i)(1-d_i/Y_i)}{Y_i}\\
&\approx \sum_{t_i <t}\frac{d_i}{Y_i^2}
\end{aligned}
$${#eq-var-NA-cuhaz-est}

:::

---

Since $\surv(t)=\text{exp}\left\{-\cuhaz(t)\right\}$, the Nelson-Aalen cumulative
hazard estimate can be converted into an alternate estimate of the
survival function:

$$
\begin{aligned}
\hat S_{NA}(t)
&= \text{exp}\left\{-\hat H_{NA}(t)\right\}\\
&= \text{exp}\left\{-\sum_{t_i < t}\frac{d_i}{Y_i}\right\}\\
&= \prod_{t_i < t}\text{exp}\left\{-\frac{d_i}{Y_i}\right\}\\
\end{aligned}
$$

---

Compare these with the corresponding Kaplan-Meier estimates:

$$
\begin{aligned}
\hat H_{KM}(t) &= -\sum_{t_i < t}\text{log}\left\{1-\frac{d_i}{Y_i}\right\}\\
\hat S_{KM}(t) &= \prod_{t_i < t}\left[1-\frac{d_i}{Y_i}\right]
\end{aligned}
$$

::: notes
The product limit estimate and the Nelson-Aalen estimate often do not
differ by much. The latter is considered more accurate in small samples
and also directly estimates the cumulative hazard. 
The `"fleming-harrington"` method for `survfit()` reduces to Nelson-Aalen
when the data are unweighted. 
We can also estimate the cumulative hazard
as the negative log of the KM survival function estimate.
:::

### Application to `bmt` dataset

```{r}
na_fit <- survfit(
  formula = surv ~ group,
  type = "fleming-harrington",
  data = bmt
)

km_fit <- survfit(
  formula = surv ~ group,
  type = "kaplan-meier",
  data = bmt
)

km_and_na <-
  bind_rows(
    .id = "model",
    "Kaplan-Meier" = km_fit |> fortify(surv.connect = TRUE),
    "Nelson-Aalen" = na_fit |> fortify(surv.connect = TRUE)
  ) |>
  as_tibble()
```

```{r}
#| fig-cap: "Kaplan-Meier and Nelson-Aalen Survival Function Estimates, stratified by disease group"

km_and_na |>
  ggplot(aes(x = time, y = surv, col = model)) +
  geom_step() +
  facet_grid(. ~ strata) +
  theme_bw() +
  ylab("S(t) = P(T>=t)") +
  xlab("Survival time (t, days)") +
  theme(legend.position = "bottom")
```

The Kaplan-Meier and Nelson-Aalen survival estimates are very similar
for this dataset.
