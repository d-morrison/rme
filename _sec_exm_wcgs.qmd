---
format:
  pdf:
    df-print: tibble
---

{{< include macros.qmd >}}

{{< include _sec_intro_wcgs.qmd >}}

### Load the data

Here, I load the data:

```{r}
#| code-fold: show
#| eval: false

### load the data directly from a UCSF website:
library(haven)
url <- paste0(
  # I'm breaking up the url into two chunks for readability
  "https://regression.ucsf.edu/sites/g/files/",
  "tkssra6706/f/wysiwyg/home/data/wcgs.dta"
)
wcgs <- haven::read_dta(url)
```

```{r}
#| include: false
# I presaved the data in my project's `data` folder
library(here) # provides the `here()` function
library(fs) # provides the `path()` function
here::here() |>
  fs::path("Data/wcgs.rda") |>
  load()
```

```{r}
#| label: tbl-wcgs
#| tbl-cap: "`wcgs` data"
wcgs
```


### Data cleaning

::: notes
Now let's do some data cleaning
:::

```{r}
#| code-fold: show
library(arsenal) # provides `set_labels()`
library(forcats) # provides `as_factor()`
library(haven)
library(plotly)
wcgs <- wcgs |>
  mutate(
    age = age |>
      arsenal::set_labels("Age (years)"),
    arcus = arcus |>
      as.logical() |>
      arsenal::set_labels("Arcus Senilis"),
    time169 = time169 |>
      as.numeric() |>
      arsenal::set_labels("Observation (follow up) time (days)"),
    dibpat = dibpat |>
      as_factor() |>
      relevel(ref = "Type B") |>
      arsenal::set_labels("Behavioral Pattern"),
    typchd69 = typchd69 |>
      labelled(
        label = "Type of CHD Event",
        labels =
          c(
            "None" = 0,
            "infdeath" = 1,
            "silent" = 2,
            "angina" = 3
          )
      ),

    # turn stata-style labelled variables in to R-style factors:
    across(
      where(is.labelled),
      haven::as_factor
    )
  )
```

### What's in the data {.smaller}

::: notes
@tbl-wcgs-demos summarizes the data.
:::

:::{#tbl-wcgs-demos}

```{r}
library(gtsummary)
wcgs |>
  select(-all_of(c("id", "uni", "t1"))) |>
  gtsummary::tbl_summary(
    by = "chd69",
    missing_text = "Missing"
  ) |>
  add_p() |>
  gtsummary::add_overall() |>
  gtsummary::bold_labels()

```

Baseline characteristics by CHD status at end of follow-up

:::

### Data by age and personality type

For now, we will look at the interaction between age and personality
type (`dibpat`). To make it easier to visualize the data, we summarize
the event rates for each combination of age:

```{r}
#| label: "event rates by age"
library(dplyr)
odds <- function(pi) pi/(1-pi)
chd_grouped_data <-
  wcgs |>
  summarize(
    .by = c(age, dibpat),
    n = sum(chd69 %in% c("Yes", "No")),
    x = sum(chd69 == "Yes")
  ) |>
  mutate(
    `n - x` = n - x,
    `p(chd)` = (x / n) |>
      labelled(label = "CHD Event by 1969"),
    `odds(chd)` = `p(chd)` / (1 - `p(chd)`),
    `logit(chd)` = log(`odds(chd)`)
  )

chd_grouped_data
```

### Graphical exploration

```{r}
#| label: fig-chd-graph-prob-scale
#| fig-cap: "CHD rates by age group, probability scale"

library(ggplot2)
library(ggeasy)
library(scales)
chd_plot_probs <-
  chd_grouped_data |>
  ggplot(
    aes(
      x = age,
      y = `p(chd)`,
      col = dibpat
    )
  ) +
  geom_point(aes(size = n), alpha = .7) +
  scale_size(range = c(1, 4)) +
  geom_line() +
  theme_bw() +
  ylab("P(CHD Event by 1969)") +
  scale_y_continuous(
    labels = scales::label_percent(),
    sec.axis = sec_axis(
      ~ odds(.),
      name = "odds(CHD Event by 1969)"
    )
  ) +
  ggeasy::easy_labs() +
  theme(legend.position = "bottom")

print(chd_plot_probs)
```

---

#### Odds scale

```{r}
#| label: fig-chd-odds-scale
#| fig-cap: "CHD rates by age group, odds spacing"

odds_inv <- function(omega) omega/(1+omega)
trans_odds <- trans_new(
  name = "odds",
  transform = odds,
  inverse = odds_inv
)

chd_plot_odds <- chd_plot_probs +
  scale_y_continuous(
    trans = trans_odds, # this line changes the vertical spacing
    name = chd_plot_probs$labels$y,
    sec.axis = sec_axis(
      ~ odds(.),
      name = "odds(CHD Event by 1969)"
    )
  )

print(chd_plot_odds)
```

---

#### Log-odds (logit) scale

```{r}
#| label: fig-chd_plot_logit
#| fig-cap: "CHD data (logit-scale)"

logit <- function(pi) log(odds(pi))
expit <- function(eta) odds_inv(exp(eta))
trans_logit <- trans_new(
  name = "logit",
  transform = logit,
  inverse = expit
)

chd_plot_logit <-
  chd_plot_probs +
  scale_y_continuous(
    trans = trans_logit, # this line changes the vertical spacing
    name = chd_plot_probs$labels$y,
    breaks = c(seq(.01, .1, by = .01), .15, .2),
    minor_breaks = NULL,
    sec.axis = sec_axis(
      ~ logit(.),
      name = "log(odds(CHD Event by 1969))"
    )
  )

print(chd_plot_logit)
```

### Logistic regression models for CHD data {.smaller}

For the `wgcs` dataset, let's consider a **logistic regression model** for the outcome of
Coronary Heart Disease ($Y$; `chd` in computer output):

- $Y = 1$ if an individual developed CHD by the end of the study;
- $Y = 0$ if they have not developed CHD by the end of the study.

Let's include two covariates, plus their interaction:

* $A$: age at study enrollment (`age`, recorded in years)
* $P$: personality type (`dibpat`):
  - $P = 1$ represents "Type A personality",
  - $P = 0$ represents "Type B personality".
* $PA$: the interaction of personality type and age (`type:dibpat`)

```{r}
#| label: eq-wcgs-model1
#| results: asis
chd_glm_contrasts <-
  wcgs |>
  glm(
    "data" = _,
    "formula" = chd69 == "Yes" ~ dibpat * age,
    "family" = binomial(link = "logit")
  )

library(equatiomatic)
equatiomatic::extract_eq(chd_glm_contrasts)
```

{{< include _sec_wcgs_model_graphs.qmd >}}

### Interpreting the model parameters

{{< include _exm_wcgs_coef_interp.qmd >}}

### General formula for odds ratios in logistic regression

{{< include _sec_OR_logistic.qmd >}}

### Interpreting the model parameter estimates

@tbl-model-corner-point shows the fitted model.

```{r}
#| label: tbl-model-corner-point
#| tbl-cap: "CHD model (corner-point parametrization)"

library(parameters)
chd_glm_contrasts |>
  parameters() |>
  print_md()
```

---

We can get the corresponding odds ratio estimates ($e^{\hat{\beta}}$s) 
by passing `exponentiate = TRUE` to `parameters()`:

```{r}
#| tbl-cap: "Odds ratio estimates for CHD model"
#| label: tbl-chd-glm-contrasts-OR
chd_glm_contrasts |>
  parameters(exponentiate = TRUE) |>
  print_md()
```


### Stratified parametrization

We could instead use a stratified parametrization:

```{r}
#| results: asis
#| label: wcgs-strat-model
chd_glm_strat <- glm(
  "formula" = chd69 == "Yes" ~ dibpat + dibpat:age - 1,
  "data" = wcgs,
  "family" = binomial(link = "logit")
)
equatiomatic::extract_eq(chd_glm_strat)
```

```{r}
#| tbl-cap: "CHD model, stratified parametrization"
#| label: tbl-chd-strat
chd_glm_strat |>
  parameters() |>
  print_md()
```

---

Again, we can get the corresponding odds ratios ($e^{\beta}$s) by passing
`exponentiate = TRUE` to `parameters()`:

```{r}
#| tbl-cap: "Odds ratio estimates for CHD model"
#| label: tbl-chd-glm-strat-OR
chd_glm_strat |>
  parameters(exponentiate = TRUE) |>
  print_md()
```

Compare with @tbl-model-corner-point.

---

:::{#exr-strat-to-contrast}
If I give you model 1, how would you get the coefficients of model 2?
:::
