{{< include macros.qmd >}}

```{r}
run_graph = TRUE
```


### Model

Assume:

- $Y_i|\vX_i \simind \Ber(\pi(X_i))$
- $\pi(\vx) = \expitf{\eta(\vx)}$
- $\eta(\vx) = \vx \cdot \vb$

### Likelihood function

:::{#exr-beetles-likelihood}

Compute and graph the likelihood for the `beetles` data model:

:::{#tbl-beetles-data-recap}

```{r}
#| label: load-beetles-data
library(glmx)
library(dplyr)
data(BeetleMortality)
beetles <- BeetleMortality |>
  mutate(
    pct = died / n,
    survived = n - died,
    dose_c = dose - mean(dose)
  )
beetles_long <-
  beetles |>
  reframe(
    .by = everything(),
    outcome = c(
      rep(1, times = died),
      rep(0, times = survived)
    )
  )
beetles
```

Mortality rates of adult flour beetles after 
five hoursâ€™ exposure to gaseous carbon disulphide [@bliss1935beetles]

:::

```{r}
#| results: asis
beetles_glm <-
  beetles |>
  glm(
    formula = cbind(died, survived) ~ dose,
    family = "binomial"
  )
equatiomatic::extract_eq(beetles_glm)
```

```{r}
#| label: tbl-beetles-model-uncentered
#| tbl-cap: "Fitted logistic regression model for `beetles` data"
beetles_glm |> 
  parameters::parameters() |> 
  parameters::print_md()
```

:::

---

:::{#sol-beetles-likelihood}

```{r}
odds_inv <- function(omega) (1 + omega^-1)^-1
lik_beetles0 <- function(beta_0, beta_1) {
  beetles |>
    mutate(
      eta = beta_0 + beta_1 * dose,
      omega = exp(eta),
      pi = odds_inv(omega),
      Lik = pi^died * (1 - pi)^survived,
      # llik = died*eta + n*log(1 - pi)
    ) |>
    pull(Lik) |>
    prod()
}

lik_beetles <- Vectorize(lik_beetles0)

```

::: {.content-visible when-format="html"}

:::{#fig-beetles-likelihood}

```{r}
#| label: beetles-likelihood-plot

ranges <- beetles_glm |> confint.default(level = 0.05)

n_points <- 25
beta_0s <- seq(
  ranges["(Intercept)", 1],
  ranges["(Intercept)", 2],
  length.out = n_points
)
beta_1s <- seq(
  ranges["dose", 1],
  ranges["dose", 2],
  length.out = n_points
)
names(beta_0s) <- round(beta_0s, 2)
names(beta_1s) <- round(beta_1s, 2)

if (run_graph) {
  lik_mat_beetles <- outer(beta_0s, beta_1s, lik_beetles)
  plotly::plot_ly(
    type = "surface",
    x = ~beta_0s,
    y = ~beta_1s,
    z = ~ t(lik_mat_beetles)
  )
  # see https://stackoverflow.com/questions/69472185/correct-use-of-coordinates-to-plot-surface-data-with-plotly 
  # for explanation of why transpose `t()` is needed
  
}
```

**Likelihood of `beetles` data.**
Bumps on ridge are artifacts of render;
increase `n_points` to improve render quality.

:::

:::

:::

---

### Log-likelihood function

{{< include _sec_derive_logistic_loglik.qmd >}}

---

:::{#exr-beetles-loglik}
Compute and graph the log-likelihood for the `beetles` data.
:::

---

:::{#sol-beetles-loglik}

```{r}
odds_inv <- function(omega) (1 + omega^-1)^-1
llik_beetles0 <- function(beta_0, beta_1) {
  beetles |>
    mutate(
      eta = beta_0 + beta_1 * dose,
      omega = exp(eta),
      pi = odds_inv(omega), # need for next line:
      llik = died*eta + n*log(1 - pi)
    ) |>
    pull(llik) |>
    sum()
}

llik_beetles <- Vectorize(llik_beetles0)

# to check that we implemented it correctly:
# ests = coef(beetles_glm_ungrouped)
# logLik(beetles_glm_ungrouped)
# llik_beetles(ests[1], ests[2])
```

::: {.content-visible when-format="html"}

:::{#fig-beetles-llik}

```{r}
#| label: beetles-llik-fig1
if (run_graph) {
  llik_mat_beetles <- outer(beta_0s, beta_1s, llik_beetles)
  plotly::plot_ly(
    type = "surface",
    x = ~beta_0s,
    y = ~beta_1s,
    z = ~ t(llik_mat_beetles)
  )
}
```

log-likelihood of `beetles` data

:::

:::

:::

---

Let's center dose:

```{r}
#| results: asis
beetles_glm_grouped_centered <- beetles |>
  glm(
    formula = cbind(died, survived) ~ dose_c,
    family = "binomial"
  )

beetles_glm_ungrouped_centered <- beetles_long |>
  mutate(died = outcome) |>
  glm(
    formula = died ~ dose_c,
    family = "binomial"
  )

equatiomatic::extract_eq(beetles_glm_ungrouped_centered)
```

```{r}
#| label: tbl-beetles-model-centered
#| tbl-cap: "Fitted logistic regression model for `beetles` data, with `dose` centered"
beetles_glm_grouped_centered |> 
  parameters::parameters() |> 
  parameters::print_md()
```

---

```{r}
#| label: beetles-lik-centered-fig
odds_inv <- function(omega) (1 + omega^-1)^-1
lik_beetles0 <- function(beta_0, beta_1) {
  beetles |>
    mutate(
      eta = beta_0 + beta_1 * dose_c,
      omega = exp(eta),
      pi = odds_inv(omega),
      Lik = (pi^died) * (1 - pi)^(survived)
    ) |>
    pull(Lik) |>
    prod()
}

lik_beetles <- Vectorize(lik_beetles0)

```

::: {.content-visible when-format="html"}

:::{#fig-beetles-lik-centered}

```{r}

ranges <- beetles_glm_grouped_centered |> confint.default(level = .95)

n_points <- 25
beta_0s <- seq(
  ranges["(Intercept)", 1],
  ranges["(Intercept)", 2],
  length.out = n_points
)
beta_1s <- seq(
  ranges["dose_c", 1],
  ranges["dose_c", 2],
  length.out = n_points
)
names(beta_0s) <- round(beta_0s, 2)
names(beta_1s) <- round(beta_1s, 2)
if (run_graph) {
  lik_mat_beetles <- outer(beta_0s, beta_1s, lik_beetles)
  plotly::plot_ly(
    type = "surface",
    x = ~beta_0s,
    y = ~beta_1s,
    z = ~ t(lik_mat_beetles)
  )
}
```

Likelihood of `beetles` data (centered model)

:::

:::

---

```{r}
odds_inv <- function(omega) (1 + omega^-1)^-1
llik_beetles0 <- function(beta_0, beta_1) {
  beetles |>
    mutate(
      eta = beta_0 + beta_1 * dose_c,
      omega = exp(eta),
      pi = odds_inv(omega),
      llik = died * eta + n*log(1 - pi)
    ) |>
    pull(llik) |>
    sum()
}

llik_beetles <- Vectorize(llik_beetles0)

```

::: {.content-visible when-format="html"}

:::{#fig-beetles-llik-centered}

```{r}
if (run_graph) {
  llik_mat_beetles <- outer(beta_0s, beta_1s, llik_beetles)
  plotly::plot_ly(
    type = "surface",
    x = ~beta_0s,
    y = ~beta_1s,
    z = ~ t(llik_mat_beetles)
  )
}
```

log-likelihood of `beetles` data (centered model)

:::

:::

### Score function

{{< include _sec_logistic_score_fn.qmd >}}

---

:::{#exr-beetles-score}

Implement and graph the score function for the beetles data

:::

---

{{< include _sec_score_graph.qmd >}}


### Hessian function

{{< include _sec_derive_logistic_hessian.qmd >}}

---

Setting $\ell'(\vb; \vy) = 0$ gives us:


$$\sumin \cb{\vx_i(y_i - \expitf{\vx_i'\beta}) } = 0$$ {#eq-score-logistic}


---

::: notes

In general, the estimating equation $\ell'(\vb; \vy) = 0$ 
cannot be solved analytically.

Instead, we can use the [Newton-Raphson method](intro-MLEs.qmd#sec-newton-raphson):

:::

$$
\esttmp{\theta}
\leftarrow \esttmp{\theta} - \inv{\hessf{\vec y;\esttmp{\theta}}}
\scoref{\vec y;\esttmp{\theta}}
$$

::: notes

We make an iterative series of guesses, 
and each guess helps us make the next guess better 
(i.e., higher log-likelihood). 
You can see some information about this process like so:

:::

```{r}
#| label: out-glm-fitting-process
#| code-fold: false

beetles_glm_ungrouped <-
  beetles_long |>
  glm(
    control = glm.control(trace = TRUE),
    formula = outcome ~ dose,
    family = "binomial"
  )
```

::: notes

After each iteration of the fitting procedure, the deviance
($2(\ell_{\text{full}} - \ell(\hat\beta))$ ) is printed. 
You can see that 
the algorithm took 5 iterations to converge to a solution where
the likelihood wasn't changing much anymore.

:::

---

@tbl-beetles-glm-ungrouped and @tbl-beetles-glm-ungrouped-vcov show 
the fitted model and the covariance matrix of the estimates, respectively.

```{r}
#| tbl-cap: Fitted model for `beetles` data
#| label: tbl-beetles-glm-ungrouped
#| code-fold: show

beetles_glm_ungrouped |> summary()
```

```{r}
#| tbl-cap: Parameter estimate covariance matrix for `beetles` data
#| label: tbl-beetles-glm-ungrouped-vcov
#| code-fold: show

beetles_glm_ungrouped |> vcov()
```
